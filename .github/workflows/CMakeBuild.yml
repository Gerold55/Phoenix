name: C++ CI
on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest (MSVC)",
            os: windows-latest,
            build_type: "Release", cc: "cl", cxx: "cl",
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
        }
        - {
            name: "Ubuntu 18.04 (GCC)",
            os: ubuntu-18.04,
            build_type: "Release", cc: "gcc", cxx: "g++"
          }
        - {
            name: "Ubuntu 18.04 (Clang)",
            os: ubuntu-18.04,
            build_type: "Release", cc: "clang", cxx: "clang++"
          }
        - {
            name: "macOS 10.15 (Clang)",
            os: macos-10.15,
            build_type: "Release", cc: "clang", cxx: "clang++"
          }

    steps:
      - name: Clone Working Branch
        uses: actions/checkout@v2.3.1
        with:
          submodules: "recursive"

      - name: Get Build Dependencies
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(ninja_suffix "win.zip")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(ninja_suffix "linux.zip")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(ninja_suffix "mac.zip")
          endif()

          execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory BUILD_TOOLS)
          set(ninja_url "https://github.com/ninja-build/ninja/releases/latest/download/ninja-${ninja_suffix}")
          file(DOWNLOAD "${ninja_url}" ./ninja.zip SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar -xvf ../ninja.zip WORKING_DIRECTORY ./BUILD_TOOLS/)
          message("::add-path::$ENV{GITHUB_WORKSPACE}/BUILD_TOOLS")

          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(COMMAND chmod +x ninja)
          endif()

      - name: Configure CMake
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})

          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            execute_process(
              COMMAND "${{ matrix.config.environment_script }}" && set
              OUTPUT_FILE environment_script_output.txt
            )
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()

          execute_process(COMMAND cmake -S. -BBuild -GNinja -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} RESULT_VARIABLE result)

          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status.")
          endif()

      - name: Build Project
        shell: cmake -P {0}
        run: |
          set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
          if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
            file(STRINGS environment_script_output.txt output_lines)
            foreach(line IN LISTS output_lines)
              if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
              endif()
            endforeach()
          endif()

          execute_process(COMMAND cmake --build Build RESULT_VARIABLE result)

          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status.")
          endif()
